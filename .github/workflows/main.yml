name: Code Suggestions Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  suggest_code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Get Repository Information
      id: repo_info
      run: |
        echo "::set-output name=repo_owner::${{ github.event.repository.owner.login }}"
        echo "::set-output name=repo_name::${{ github.event.repository.name }}"
        echo "::set-output name=sha::${{ github.event.pull_request.head.sha }}"

    - name: Fetch Code from Commit
      id: fetch_code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo_owner=${{ steps.repo_info.outputs.repo_owner }}
        repo_name=${{ steps.repo_info.outputs.repo_name }}
        sha=${{ steps.repo_info.outputs.sha }}
        
        # Fetch the list of files changed in the commit
        files=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                 "https://api.github.com/repos/$repo_owner/$repo_name/commits/$sha" | jq -r '.files[].filename')
        
        # Initialize an empty variable to store the file contents
        code=""
        
        # Loop through each file and fetch its contents
        for file in $files; do
          file_content=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                         "https://api.github.com/repos/$repo_owner/$repo_name/contents/$file?ref=$sha" | jq -r '.content' | base64 --decode)
          code="$code\n\n$file:\n$file_content"
        done
        
        # Print the concatenated code for debugging
        echo -e "$code"
        
        # Save the code to a file
        echo -e "$code" > code.txt

    - name: Call Code Suggestions API
      id: code_suggestions
      run: |
        code=$(cat code.txt)
        response=$(curl -s -X GET -H "Content-Type: application/json" -d "{\"query\": \"$code\"}" https://xkcd.com/info.0.json)
        echo "API Response: $response"
        echo "$response" | jq '.' > suggestions.json
        echo "::set-output name=suggestions::$(cat suggestions.json)"

    - name: Post Code Review Suggestions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        suggestions="Replaced the loop-based sum calculation with the mathematical formula n(n+1)/2\n   - This eliminates 1 million iterations, significantly reducing CPU cycles\n   - Used long to prevent integer overflow\n   \n2. **String Handling:**\n   - Removed unnecessary String object creation with \n   - Used enhanced for loop instead of index-based iteration\n   - Prevents redundant memory allocation and garbage collection\n\n3. **General Improvements:**\n   - Removed unnecessary whitespace and carriage returns\n   - Used more efficient loop construct\n   - Avoided unnecessary object creation\n\n**Carbon Emissions Savings Breakdown:**\n1. Sum calculation optimization: ~95% reduction\n   - Mathematical formula vs. million iterations\n2. String handling optimization: ~40% reduction\n   - Avoiding unnecessary object creation\n3. Loop optimization: ~20% reduction\n   - Enhanced for loop efficiency\n\n**Overall Estimated Carbon Emissions Saved: 85%**\n\nThis estimate considers:\n- Reduced CPU cycles\n- Lower memory usage\n- Fewer garbage collection cycles\n- More efficient algorithmic approach\n- Reduced power consumption due to shorter execution time\n\nThe most significant saving comes from replacing the linear sum calculation with a constant-time mathematical formula, which dramatically reduces the computational resources required."
        pr_number=${{ github.event.pull_request.number }}
        repo=${{ github.repository }}
        review_body=$(printf "### Code Review Suggestions\n I'll analyze this code and suggest a more sustainable version.\n\n**Suggested Green Code:**\n\`\`\`python\n# Reads and processes the file line by line\nwith open('large_file.txt', 'r') as file:\n    for line in file:\n        print(line.rstrip())\n\`\`\`\n\n**Explanation of Changes:**\n1. **Memory Efficiency**: The original code reads the entire file into memory using \`read()\` and then splits it into lines. This can be very memory-intensive for large files. The suggested version reads the file line by line, which uses significantly less memory as it only keeps one line in memory at a time.\n\n2. **Processing Efficiency**: Instead of loading all data first and then iterating, we're now processing each line as we read it. This creates a streaming effect that's more efficient in terms of memory usage and processing time.\n\n3. **Resource Management**: The suggested approach reduces the peak memory usage, which means less RAM is needed and therefore less power is consumed. This is particularly important for large files.\n\n4. **Optimization**: Using \`rstrip()\` instead of \`splitlines()\` is more efficient as it only removes the trailing newline character rather than creating a new list of all lines.\n\n**Percentage of Carbon Emissions Saved:** ~40%\n\nThis estimate is based on:\n- Reduced memory usage (approximately 50-70% less for large files)\n- Lower CPU usage due to streaming processing\n- Reduced garbage collection overhead\n- The actual savings depend on the file size, with larger files showing greater benefits\n- The percentage could be even higher for very large files where the original code might cause memory issues or swapping\n\nThe savings are particularly significant when dealing with large files, as the memory efficiency prevents the need for disk swapping and reduces the overall system resource usage.")
        #review_body=$(jq -Rn --arg suggestions "$suggestions" '### Code Review Suggestions\n\($suggestions)')
        data=$(jq -n --arg event "COMMENT" --arg body "$review_body" '{event: $event, body: $body}')
        echo "Review Data: $data"
        curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -X POST -d "$data" "https://api.github.com/repos/$repo/pulls/$pr_number/reviews"
